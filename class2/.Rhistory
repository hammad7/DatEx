pred <- predict(obj,dat[!names(dat) %in% t])#nb warnings
obj_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(obj_tab$overall[1:2],obj_tab$byClass))
#obj_tab$table
#class(obj_tab$byClass)
#validation
#val_df <- rbind(val_df, obj$results[,c("Accuracy",'Kappa')])
#test
pred2 <- predict(obj,itest[!names(dat) %in% t])
obj_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(obj_tab2$overall[1:2],obj_tab2$byClass))
tim <- rbind(tim,obj$times$everything[1:3])
}
dat <- read.csv('class3.csv')#****saved with p=100
set.seed(5678)
idi <- createDataPartition(dat$UNS,p=0.8,list=F)
itest <- dat[-idi,2:7]
dat <- dat[idi,2:7]
t <- 'UNS'
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,lda,rf,rp,boostgbm,boostxgb,nb,knn)
for(i in 1:10){
obj <- lt[[i]]
#training
pred <- predict(obj,dat[!names(dat) %in% t])#nb warnings
obj_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(obj_tab$overall[1:2],obj_tab$byClass))
#obj_tab$table
#class(obj_tab$byClass)
#validation
#val_df <- rbind(val_df, obj$results[,c("Accuracy",'Kappa')])
#test
pred2 <- predict(obj,itest[!names(dat) %in% t])
obj_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(obj_tab2$overall[1:2],obj_tab2$byClass))
tim <- rbind(tim,obj$times$everything[1:3])
}
lt[[1]]$results
lt[[2]]
lt[[3]]$results
lt[[2]]$results[3,c("Accuracy",'Kappa')]
lt[[2]]$results[,c("Accuracy",'Kappa')]
lt[[2]]$results[which.min(lt[[2]]$results$Kappa),c("Accuracy",'Kappa')]
lt[[2]]$results[which.max(lt[[2]]$results$Kappa),c("Accuracy",'Kappa')]
val_df <- rbind(val_df, lt[[1]]$results[,c("Accuracy",'Kappa')])
lt[[3]]$results[which.max(lt[[3]]$results$Kappa),c("Accuracy",'Kappa')]
lt[[4]]$results[,c("Accuracy",'Kappa')]
lt[[5]]$results[,c("Accuracy",'Kappa')]
lt[[5]]$results[which.max(lt[[5]]$results$Kappa),c("Accuracy",'Kappa')]
lt[[6]]$results[,c("Accuracy",'Kappa')]
lt[[4]]$results[which.max(lt[[4]]$results$Kappa),c("Accuracy",'Kappa')]
val_df <- data.frame()
for(i in 1:10){
val_df <- rbind(val_df, lt[[i]]$results[which.max(lt[[i]]$results$Kappa),c("Accuracy",'Kappa')])
}
colnames(train_df) <- c('Accuracy','Kappa','Sensitivity','Specificity','Pos Pred Value','Neg Pred Value','Prevalence','Detection Rate','Detection Prevalence','Balanced Accuracy')
colnames(val_df) <- c('Accuracy','Kappa')
colnames(test_df) <- c('Accuracy','Kappa','Sensitivity','Specificity','Pos Pred Value','Neg Pred Value','Prevalence','Detection Rate','Detection Prevalence','Balanced Accuracy')
colnames(tim) <- c('user','self', 'elapsed')
ltn <- list(nnrpropp,nnrpropm,nnsag,nnslr)
for(i in 1:4){
obj <- ltn[[i]]
pred <- apply(obj$net.result[[which.min(obj$result.matrix[1,])]],1,which.max)#min error rep only
pred <- sort(unique(dat[,t]))[pred]
net_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(net_tab$overall[1:2],net_tab$byClass))
res <- compute(obj,itest[,!names(dat) %in% t],rep=which.min(obj$result.matrix[1,]))$net.result
pred2 <- apply(res,1,which.max)#min error rep only
pred2 <- sort(unique(itest[,t]))[pred2]
net_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(net_tab2$overall[1:2],net_tab2$byClass))
}
dat[,t]
set.seed(5678)
idi <- createDataPartition(dat$UNS,p=0.8,list=F)
itest <- dat[-idi,2:7]
dat <- dat[idi,2:7]
svml <- readRDS('svmLinear.rds')
svmr <- readRDS('svmRadial.rds')
svmp <- readRDS('svmPoly.rds')
lda <- readRDS('lda.rds')
rf <- readRDS('rf.rds')
rp <- readRDS('rpart.rds')
boostgbm <- readRDS('boostgbm.rds')
boostxgb <- readRDS('boostxgb.rds')
knn <- readRDS('knn.rds')
nb <- readRDS('nb.rds')
nnrpropp <- readRDS('nnrprop+.rds')
nnrpropm <- readRDS('nnrprop-.rds')
nnsag <- readRDS('nnsag.rds')
nnslr <- readRDS('nnslr.rds')
t <- 'UNS'
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,lda,rf,rp,boostgbm,boostxgb,nb,knn)
for(i in 1:10){
obj <- lt[[i]]
#training
pred <- predict(obj,dat[!names(dat) %in% t])#nb warnings
obj_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(obj_tab$overall[1:2],obj_tab$byClass))
#obj_tab$table
#class(obj_tab$byClass)
#validation
#val_df <- rbind(val_df, obj$results[,c("Accuracy",'Kappa')])
#test
pred2 <- predict(obj,itest[!names(dat) %in% t])
obj_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(obj_tab2$overall[1:2],obj_tab2$byClass))
tim <- rbind(tim,obj$times$everything[1:3])
}
for(i in 1:10){
val_df <- rbind(val_df, lt[[i]]$results[which.max(lt[[i]]$results$Kappa),c("Accuracy",'Kappa')])
}
colnames(train_df) <- c('Accuracy','Kappa','Sensitivity','Specificity','Pos Pred Value','Neg Pred Value','Prevalence','Detection Rate','Detection Prevalence','Balanced Accuracy')
colnames(val_df) <- c('Accuracy','Kappa')
colnames(test_df) <- c('Accuracy','Kappa','Sensitivity','Specificity','Pos Pred Value','Neg Pred Value','Prevalence','Detection Rate','Detection Prevalence','Balanced Accuracy')
colnames(tim) <- c('user','self', 'elapsed')
ltn <- list(nnrpropp,nnrpropm,nnsag,nnslr)
for(i in 1:4){
obj <- ltn[[i]]
pred <- apply(obj$net.result[[which.min(obj$result.matrix[1,])]],1,which.max)#min error rep only
pred <- sort(unique(dat[,t]))[pred]
net_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(net_tab$overall[1:2],net_tab$byClass))
res <- compute(obj,itest[,!names(dat) %in% t],rep=which.min(obj$result.matrix[1,]))$net.result
pred2 <- apply(res,1,which.max)#min error rep only
pred2 <- sort(unique(itest[,t]))[pred2]
net_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(net_tab2$overall[1:2],net_tab2$byClass))
}
rownames(train_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(val_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
rownames(test_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(tim) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
tr <- round(train_df[order(train_df$Kappa,decreasing = T),],3)
vl <-round(val_df[order(val_df$Kappa,decreasing = T),],3)
tt <- round(test_df[order(test_df$Kappa,decreasing = T),],3)
tm <- tim[order(tim$elapsed),]
tm_withnn <- c(tim[,3],c(31.30,31.34,61.70,50.04))
View(tt)
names(tm_withnn) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
tm_withnn <- as.data.frame(sort(tm_withnn))
colnames(tm_withnn) <- 'Time (s);'
View(tm_withnn)
View(tr)
View(vl)
t <- 'UNS'
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,lda,rf,rp,boostgbm,boostxgb,nb,knn)
for(i in 1:10){
obj <- lt[[i]]
#training
pred <- predict(obj,dat[!names(dat) %in% t])#nb warnings
obj_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(obj_tab$overall[1:2],obj_tab$byClass))
#obj_tab$table
#class(obj_tab$byClass)
#validation
#val_df <- rbind(val_df, obj$results[,c("Accuracy",'Kappa')])
#test
pred2 <- predict(obj,itest[!names(dat) %in% t])
obj_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(obj_tab2$overall[1:2],obj_tab2$byClass))
tim <- rbind(tim,obj$times$everything[1:3])
}
for(i in 1:10){
val_df <- rbind(val_df, lt[[i]]$results[which.max(lt[[i]]$results$Kappa),c("Accuracy",'Kappa')])
}
colnames(train_df) <- c('Accuracy','Kappa','Sensitivity','Specificity','Pos Pred Value','Neg Pred Value','Prevalence','Detection Rate','Detection Prevalence','Balanced Accuracy')
colnames(val_df) <- c('Accuracy','Kappa')
colnames(test_df) <- c('Accuracy','Kappa','Sensitivity','Specificity','Pos Pred Value','Neg Pred Value','Prevalence','Detection Rate','Detection Prevalence','Balanced Accuracy')
colnames(tim) <- c('user','self', 'elapsed')
ltn <- list(nnrpropp,nnrpropm,nnsag,nnslr)
for(i in 1:4){
obj <- ltn[[i]]
pred <- apply(obj$net.result[[which.min(obj$result.matrix[1,])]],1,which.max)#min error rep only
#pred <- sort(unique(dat[,t]))[pred]
pred <- gsub(t,'',colnames(obj$response))[pred]
net_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(net_tab$overall[1:2],net_tab$byClass))
test_msc <- scale(itest[,!names(itest) %in% t],scale=div)
res <- compute(obj,test_msc,rep=which.min(obj$result.matrix[1,]))$net.result
pred2 <- apply(res,1,which.max)#min error rep only
#pred2 <- sort(unique(itest[,t]))[pred2]
pred2 <- gsub(t,'',colnames(obj$response))[pred2]
net_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(net_tab2$overall[1:2],net_tab2$byClass))
}
rownames(train_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(val_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
rownames(test_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(tim) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
tr <- round(train_df[order(train_df$Kappa,decreasing = T),],3)
vl <-round(val_df[order(val_df$Kappa,decreasing = T),],3)
tt <- round(test_df[order(test_df$Kappa,decreasing = T),],3)
tm <- tim[order(tim$elapsed),]
tm_withnn <- c(tim[,3],c(31.30,31.34,61.70,50.04))
t <- 'UNS'
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,lda,rf,rp,boostgbm,boostxgb,nb,knn)
for(i in 1:10){
obj <- lt[[i]]
#training
pred <- predict(obj,dat[!names(dat) %in% t])#nb warnings
obj_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(obj_tab$overall[1:2],obj_tab$byClass))
#obj_tab$table
#class(obj_tab$byClass)
#validation
#val_df <- rbind(val_df, obj$results[,c("Accuracy",'Kappa')])
#test
pred2 <- predict(obj,itest[!names(dat) %in% t])
obj_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(obj_tab2$overall[1:2],obj_tab2$byClass))
tim <- rbind(tim,obj$times$everything[1:3])
}
for(i in 1:10){
val_df <- rbind(val_df, lt[[i]]$results[which.max(lt[[i]]$results$Kappa),c("Accuracy",'Kappa')])
}
colnames(train_df) <- c('Accuracy','Kappa','Sensitivity','Specificity','Pos Pred Value','Neg Pred Value','Prevalence','Detection Rate','Detection Prevalence','Balanced Accuracy')
colnames(val_df) <- c('Accuracy','Kappa')
colnames(test_df) <- c('Accuracy','Kappa','Sensitivity','Specificity','Pos Pred Value','Neg Pred Value','Prevalence','Detection Rate','Detection Prevalence','Balanced Accuracy')
colnames(tim) <- c('user','self', 'elapsed')
ltn <- list(nnrpropp,nnrpropm,nnsag,nnslr)
for(i in 1:4){
obj <- ltn[[i]]
pred <- apply(obj$net.result[[which.min(obj$result.matrix[1,])]],1,which.max)#min error rep only
#pred <- sort(unique(dat[,t]))[pred]
pred <- gsub(t,'',colnames(obj$response))[pred]
net_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(net_tab$overall[1:2],net_tab$byClass))
mxs <- apply(dat[!names(dat) %in% t], 2, max)
mns <- apply(dat[!names(dat) %in% t], 2, min)
dv <- mxs-mns
dv[dv==0] <- 1 #avoid NaN
test_msc <- scale(itest[,!names(itest) %in% t],scale=dv)
res <- compute(obj,test_msc,rep=which.min(obj$result.matrix[1,]))$net.result
pred2 <- apply(res,1,which.max)#min error rep only
#pred2 <- sort(unique(itest[,t]))[pred2]
pred2 <- gsub(t,'',colnames(obj$response))[pred2]
net_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(net_tab2$overall[1:2],net_tab2$byClass))
}
rownames(train_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(val_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
rownames(test_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(tim) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
tr <- round(train_df[order(train_df$Kappa,decreasing = T),],3)
vl <-round(val_df[order(val_df$Kappa,decreasing = T),],3)
tt <- round(test_df[order(test_df$Kappa,decreasing = T),],3)
tm <- tim[order(tim$elapsed),]
tm_withnn <- c(tim[,3],c(31.30,31.34,61.70,50.04))
View(tt)
View(tr)
View(vl)
tm_withnn <- as.data.frame(sort(tm_withnn))
colnames(tm_withnn) <- 'Time (s);'
View(tm_withnn)
max(table(dat[,t])/length(dat[,t]))#baseline
View(tt)
View(tt)
dat <- read.csv('class3.csv')
set.seed(5678)
idi <- createDataPartition(dat$UNS,p=0.8,list=F)
itest <- dat[-idi,2:7]
dat <- dat[idi,2:7]
svml <- readRDS('svmLinear.rds')
svmr <- readRDS('svmRadial.rds')
svmp <- readRDS('svmPoly.rds')
lda <- readRDS('lda.rds')
rf <- readRDS('rf.rds')
rp <- readRDS('rpart.rds')
boostgbm <- readRDS('boostgbm.rds')
boostxgb <- readRDS('boostxgb.rds')
knn <- readRDS('knn.rds')
nb <- readRDS('nb.rds')
nnrpropp <- readRDS('nnrprop+.rds')
nnrpropm <- readRDS('nnrprop-.rds')
nnsag <- readRDS('nnsag.rds')
nnslr <- readRDS('nnslr.rds')
t <- 'UNS'
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,lda,rf,rp,boostgbm,boostxgb,nb,knn)
for(i in 1:10){
obj <- lt[[i]]
#training
pred <- predict(obj,dat[!names(dat) %in% t])#nb warnings
obj_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(obj_tab$overall[1:2],obj_tab$byClass))
#obj_tab$table
#class(obj_tab$byClass)
#validation
#val_df <- rbind(val_df, obj$results[,c("Accuracy",'Kappa')])
#test
pred2 <- predict(obj,itest[!names(dat) %in% t])
obj_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(obj_tab2$overall[1:2],obj_tab2$byClass))
tim <- rbind(tim,obj$times$everything[1:3])
}
t <- 'UNS'
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
obj <- lt[[1]]
pred <- predict(obj,dat[!names(dat) %in% t])#nb warnings
obj_tab <- confusionMatrix(table(dat[,t],pred))
rbind(train_df,c(obj_tab$overall[1:2],obj_tab$byClass))
train_df
c(obj_tab$overall[1:2],obj_tab$byClass)
obj_tab$overall[1:2]
obj_tab$byClass
c(obj_tab$overall[1:2],obj_tab$byClass)
z< -c(obj_tab$overall[1:2],obj_tab$byClass)
z<-c(obj_tab$overall[1:2],obj_tab$byClass)
c(obj_tab$overall[1:2],obj_tab$byClass)
obj_tab$byClass
obj <- ltn[[1]]
pred <- apply(obj$net.result[[which.min(obj$result.matrix[1,])]],1,which.max)#min error rep only
pred <- gsub(t,'',colnames(obj$response))[pred]
net_tab <- confusionMatrix(table(dat[,t],pred))
c(net_tab$overall[1:2],net_tab$byClass)
net_tab$byClass
obj_tab$byClass
table(dat[,t])
max(table(dat[,t]))
which.max(table(dat[,t]))
obj_tab$byClass[which.max(table(dat[,t])),]
dat <- read.csv('class3.csv')
set.seed(5678)
idi <- createDataPartition(dat$UNS,p=0.8,list=F)
itest <- dat[-idi,2:7]
dat <- dat[idi,2:7]
svml <- readRDS('svmLinear.rds')
svmr <- readRDS('svmRadial.rds')
svmp <- readRDS('svmPoly.rds')
lda <- readRDS('lda.rds')
rf <- readRDS('rf.rds')
rp <- readRDS('rpart.rds')
boostgbm <- readRDS('boostgbm.rds')
boostxgb <- readRDS('boostxgb.rds')
knn <- readRDS('knn.rds')
nb <- readRDS('nb.rds')
nnrpropp <- readRDS('nnrprop+.rds')
nnrpropm <- readRDS('nnrprop-.rds')
nnsag <- readRDS('nnsag.rds')
nnslr <- readRDS('nnslr.rds')
t <- 'UNS'
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,lda,rf,rp,boostgbm,boostxgb,nb,knn)
for(i in 1:10){
obj <- lt[[i]]
#training
pred <- predict(obj,dat[!names(dat) %in% t])#nb warnings
obj_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(obj_tab$overall[1:2],obj_tab$byClass[which.max(table(dat[,t])),]))
#sensitivity of major class only because 4 rows
#test
pred2 <- predict(obj,itest[!names(dat) %in% t])
obj_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(obj_tab2$overall[1:2],obj_tab2$byClass[which.max(table(dat[,t])),]))
tim <- rbind(tim,obj$times$everything[1:3])
}
for(i in 1:10){
val_df <- rbind(val_df, lt[[i]]$results[which.max(lt[[i]]$results$Kappa),c("Accuracy",'Kappa')])
}
colnames(train_df) <- c('Accuracy','Kappa','Sensitivity','Specificity','Pos Pred Value','Neg Pred Value','Prevalence','Detection Rate','Detection Prevalence','Balanced Accuracy')
colnames(val_df) <- c('Accuracy','Kappa')
colnames(test_df) <- c('Accuracy','Kappa','Sensitivity','Specificity','Pos Pred Value','Neg Pred Value','Prevalence','Detection Rate','Detection Prevalence','Balanced Accuracy')
colnames(tim) <- c('user','self', 'elapsed')
ltn <- list(nnrpropp,nnrpropm,nnsag,nnslr)
for(i in 1:4){
obj <- ltn[[i]]
pred <- apply(obj$net.result[[which.min(obj$result.matrix[1,])]],1,which.max)#min error rep only
#pred <- sort(unique(dat[,t]))[pred]
pred <- gsub(t,'',colnames(obj$response))[pred]
net_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(net_tab$overall[1:2],net_tab$byClass[which.max(table(dat[,t])),]))
mxs <- apply(dat[!names(dat) %in% t], 2, max)
mns <- apply(dat[!names(dat) %in% t], 2, min)
dv <- mxs-mns
dv[dv==0] <- 1 #avoid NaN
test_msc <- scale(itest[,!names(itest) %in% t],scale=dv)
res <- compute(obj,test_msc,rep=which.min(obj$result.matrix[1,]))$net.result
pred2 <- apply(res,1,which.max)#min error rep only
#pred2 <- sort(unique(itest[,t]))[pred2]
pred2 <- gsub(t,'',colnames(obj$response))[pred2]
net_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(net_tab2$overall[1:2],net_tab2$byClass[which.max(table(dat[,t])),]))
}
rownames(train_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(val_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
rownames(test_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(tim) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
tr <- round(train_df[order(train_df$Kappa,decreasing = T),],3)
vl <-round(val_df[order(val_df$Kappa,decreasing = T),],3)
tt <- round(test_df[order(test_df$Kappa,decreasing = T),],3)
tm <- tim[order(tim$elapsed),]
tm_withnn <- c(tim[,3],c(31.30,31.34,61.70,50.04))
View(tt)
shiny::runApp('~/rdir/pro')
setwd('../class2')
saveRDS(svm_Mod,'svmLinear.rds')
saveRDS(rf_Mod,'rf.rds')
saveRDS(reg_Mod,'reglog.rds')
saveRDS(boost_Mod,'boostgbm.rds')
saveRDS(nb_Mod,'nb.rds')
saveRDS(knn_Mod,'knn.rds')
shiny::runApp('~/rdir/pro')
knn_Mod$modelType
knn_Mod$modelInfo
knn_Mod$call
knn_Mod$results
shiny::runApp('~/rdir/pro')
saveRDS(svm_Mod,'svmRadial.rds')
saveRDS(rf_Mod,'rpart.rds')
saveRDS(boost_Mod,'boostxgb.rds')
shiny::runApp('~/rdir/pro')
shiny::runApp('~/rdir/pro')
saveRDS(svm_Mod,'svmPoly.rds')
saveRDS(rf_Mod,'rpart.rds')
saveRDS(boost_Mod,'boostxgb.rds')
saveRDS(lda_Mod,'sqda.rds')
shiny::runApp('~/rdir/pro')
saveRDS(svm_Mod,'svmRadial.rds')
shiny::runApp('~/rdir/pro')
shiny::runApp('~/rdir/pro')
saveRDS(neuralnet_Mod,'nnrprop+.rds')
shiny::runApp('~/rdir/pro')
saveRDS(neuralnet_Mod,'nnrprop-.rds')
z <- readRDS('rprop+.rds')
z <- readRDS('nnrprop+.rds')
z
z$response
z$covariate
dim(z$covariate)
setwd()
setwd('../class3')
z <- readRDS('nnrprop+.rds')
z$model.list
dim(z$net.result)
length(z$net.result)
dimlength(z$net.result[[1]])
dim(z$net.result[[1]])
setwd('../class2')
shiny::runApp('~/rdir/pro')
neuralnet_Mod$response
shiny::runApp('~/rdir/pro')
shiny::runApp('~/rdir/pro')
saveRDS(neuralnet_Mod,'nnrprop+.rds')
shiny::runApp('~/rdir/pro')
neuralnet_Mod$net.result
(neuralnet_Mod$net.result)[1:5,1:5]
(neuralnet_Mod$model.list)
(neuralnet_Mod$result.matrix)[1:5,1:5]
(neuralnet_Mod$net.result)[1:5,1:5]
shiny::runApp('~/rdir/pro')
saveRDS(neuralnet_Mod,'nnrprop+.rds')
shiny::runApp('~/rdir/pro')
saveRDS(neuralnet_Mod,'nnrprop-.rds')
shiny::runApp('~/rdir/pro')
saveRDS(neuralnet_Mod,'nnsag.rds')
shiny::runApp('~/rdir/pro')
saveRDS(neuralnet_Mod,'nnslr.rds')
library(mlbench)
data("Ionosphere")
Ionosphere[1,]
write.csv(Ionosphere,'class2.csv')
dat <- Ionosphere#read.csv('class3.csv')
set.seed(5678)
idi <- createDataPartition(dat$UNS,p=0.8,list=F)
itest <- dat[-idi,2:7]
dat <- dat[idi,2:7]
svml <- readRDS('svmLinear.rds')
svmr <- readRDS('svmRadial.rds')
svmp <- readRDS('svmPoly.rds')
sqda <- readRDS('sqda.rds')
rf <- readRDS('rf.rds')
rp <- readRDS('rpart.rds')
boostgbm <- readRDS('boostgbm.rds')
boostxgb <- readRDS('boostxgb.rds')
knn <- readRDS('knn.rds')
nb <- readRDS('nb.rds')
nnrpropp <- readRDS('nnrprop+.rds')
nnrpropm <- readRDS('nnrprop-.rds')
nnsag <- readRDS('nnsag.rds')
nnslr <- readRDS('nnslr.rds')
reglog <- readRDS('reglog.rds')
set.seed(5678)
t <- 'UNS'
t <- 'Class'
idi <- createDataPartition(dat[,t],p=0.8,list=F)
dat <- Ionosphere#read.csv('class3.csv')
idi <- createDataPartition(dat[,t],p=0.8,list=F)
