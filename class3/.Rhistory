linear.output = F,
lifesign = 'full')
net <- neuralnet(form, mm,
hidden=c(12,4),
linear.output = F,
lifesign = 'full')
net <- neuralnet(form, mm,
hidden=c(12,4),
linear.output = F,
lifesign = 'full')
net <- neuralnet(form, mm,
hidden=c(12,4),
linear.output = T,
lifesign = 'full')
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]],1,which.max)#min error rep only
pred <- sort(unique(mydata[,'Class']))[pred]
confusionMatrix(table(mydata[,'Class'],pred))
head(mydata)
?train
z <- train(mydata[,!names %in% 'Class'],mydata[,'Class'],method='gbm',preProcess = c('center','scale'))
z <- train(mydata[,!names %in% 'Class'],mydata[,'Class'],method='gbm')
z <- train(mydata[,!names(mydata) %in% 'Class'],mydata[,'Class'],method='gbm',preProcess = c('center','scale'))
registerDoParallel(makeCluster(3))
z <- train(mydata[,!names(mydata) %in% 'Class'],mydata[,'Class'],method='gbm',preProcess = c('center','scale'))
z
mydata['Class']
class(mydata['Class'])
colnames(mydata['Class'])
shiny::runApp('rdir/pro')
maxs <- apply(mydata, 2, max)
mins <- apply(mydata, 2, min)
m_sc <- scale(mydata,scale=maxs-mins)
z <- as.data.frame(m_sc)
colnames(z)
shiny::runApp('rdir/pro')
net <- neuralnet_Mod
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]]*(maxs[input$t_f]-mins[input$t_f]) + mean(mydata[,input$t_f]),
1,which.max)#min error rep only
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]]*(maxs['Class']-mins['Class']) + mean(mydata[,'Class']),
1,which.max)#min error rep only
pred
mydata[,'Class']
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]]*(maxs['Class']-mins['Class']) + mean(mydata[,'Class']),1,which.max)
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
maxs[!names(mydata) %in% 'medv']
maxs[!names(mydata) %in% 'AngleCh1']
!names(mydata) %in% 'AngleCh1'
maxs
maxs[c(T,T)]
!names(mydata) %in% 'AngleCh1'
names(mydata)
!names(mydata) %in% 'Class'
maxs[!names(mydata) %in% 'Class']
shiny::runApp('rdir/pro')
maxs[!names(mydata) %in% 'Class']
maxs[!names(mydata) %in% 'medv']
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
?rmse
?RMSE
RMSE(pred,mydata[,input$t_f])
RMSE(pred,mydata[,'medv'])
RMSE(1:10,1:10+rnorm(1-))
RMSE(1:10,1:10+rnorm(10))
summary(RMSE(1:10,1:10+rnorm(10)))
?RMSE()
predicted <-  matrix(rnorm(50), ncol = 5)
observed <- rnorm(10)
apply(predicted, 2, postResample, obs = observed)
table(5,6)
c(5,6)
data.frame(RMSE=2,Rsqaured=2)
data.frame(RMSE=2,Rsqaured=2)
shiny::runApp('rdir/pro')
(sum((pred - mean(mydata[,input$t_f]))^2)/sum((mydata[,input$t_f] - mean(mydata[,input$t_f]))^2))
(sum((pred - mean(mydata[,'medv']))^2)/sum((mydata[,'medv'] - mean(mydata[,'medv']))^2))
pred
shiny::runApp('rdir/pro')
net <- neuralnet_Mod
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]]*(maxs[input$t_f]-mins[input$t_f]) + mean(mydata[,input$t_f])
,1,which.max)#min error rep only
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]]*(maxs['medv']-mins['medv']) + mean(mydata[,'medv'])
,1,which.max)#min error rep only
pred
dim(testing)
rmse <- (sqrt(sum((mydata[,input$t_f]-pred)^2)/nrow(mydata)))
shiny::runApp('rdir/pro')
?neuralnet
?checkboxInput('nnlo','linear output'),
?checkboxInput('nnlo','linear output')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
net <- neuralnet_Mod
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]]#*(maxs[input$t_f]-mins[input$t_f]) + mean(mydata[,input$t_f])
,1,which.max)#min error rep only
pred
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]]#*(maxs['Class]-mins['Class]) + mean(mydata[,'Class])
,1,which.max)#min error rep only
pred
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]]#*(maxs['Class]-mins['Class]) + mean(mydata[,'Class]),1,which.max)#min error rep only
)
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]],1,which.max)
pred
net
shiny::runApp('rdir/pro')
sapply(mydata,classs)
sapply(mydata,class)
neuralnet_Mod
complete.cases(mydata)
shiny::runApp('rdir/pro')
net <- neuralnet(form, m,
hidden=5,threshold = 0.1,
stepmax = 10000
linear.output = T,
lifesign = 'full')
net <- neuralnet(form, m,
hidden=5,threshold = 0.1,
stepmax = 10000,
linear.output = T,
lifesign = 'full')
form
rm(list=ls)
rm(list=ls())
shiny::runApp('rdir/pro')
neuralnet_Mod
shiny::runApp('rdir/pro')
form
m
shiny::runApp('rdir/pro')
m
ff <- formula(paste('~',paste(paste(names(mydata),collapse='+'),'-1')))
ff
m <- model.matrix(ff,data=as.data.frame(m_sc))#mydata)#global m
m
m <- model.matrix(ff,data=as.data.frame(m_sc))#mydata)#global m
m
ff
as.data.frame(m_sc)
?model.matrix()
g <- log(Volume) ~ log(Height) + log(Girth)
str(mp <- model.frame(g, trees))
mat <- model.matrix(g, mp)
shiny::runApp('rdir/pro')
ff
ff <- formula(paste('~',paste(paste(names(mydata),collapse='+'),'0')))
ff <- formula(paste('~',paste(paste(names(mydata),collapse='+'),'0')))
ff <- formula(paste('~',paste(paste(names(mydata),collapse='+'),'e')))
ff <- formula(paste('~',paste(paste(names(mydata),collapse='+'),'-1')))
ff
paste(paste(names(mydata),collapse='+')
'-1')
paste(names(mydata),collapse='+')
paste(paste(names(mydata),collapse='+'),'-1')
ff <- formula(paste('~',paste(paste(names(mydata),collapse='+'),'-0')))
ff <- formula(paste('~',paste(paste(names(mydata),collapse='+'),'0')))
ff <- formula(paste('~',paste(paste(names(mydata),collapse='+'),as.character('0'))))
ff <- formula(paste('~',paste(paste(names(mydata),collapse='+'),'-1')))
t <- paste(paste(names(mydata),collapse='+')
)
t <- paste(names(mydata),collapse='+')
t
paste(t,'0')
paste(t,'+0')
paste(paste(names(mydata),collapse='+'),'-1')
paste(paste(names(mydata),collapse='+'),'0')
paste(paste(names(mydata),collapse='+'),'+0')
ff <- formula(paste('~',paste(paste(names(mydata),collapse='+'),'+0')))
ff
#}
m <- model.matrix(ff,data=as.data.frame(m_sc))#mydata)#global m
m
md <- m_sc[1:5,]
md
GermanCredit[1:10,]
maxs <<- apply(mydata[!names(mydata) %in% input$t_f], 2, max)
maxs <<- apply(mydata[!names(mydata) %in% 'Class'], 2, max)
mins <<- apply(mydata[!names(mydata) %in% 'Class'], 2, min)
maxs
m_sc <<- scale(mydata[!names(mydata) %in% input$t_f],scale=maxs-mins)
m_sc <<- scale(mydata[!names(mydata) %in% 'Class'],scale=maxs-mins)
m_sc[1:10,]
div <- maxs-mins
div
div[div==0]
div[div==0] <- 1
div[div==0]
div
shiny::runApp('rdir/pro')
head(m_sc)
ff <- formula(paste('~',paste(paste(names(mydata),collapse='+'),'-1')))
m <- model.matrix(ff,data=as.data.frame(m_sc))#mydata)#global m
targs <- paste(input$t_f,unique(mydata[,input$t_f]),sep='')
targs <- paste(input$t_f,unique(mydata[,'Class']),sep='')
targs <- paste('Class',unique(mydata[,'Class']),sep='')
form <- paste(paste(targs,collapse = '+'),paste(colnames(m)[!colnames(m) %in% targs],collapse = ' + '),sep = '~')
form
net <- neuralnet(form, m,
hidden=5,
linear.output = T,
lifesign = 'full')
net <- neuralnet(form, m,
hidden=5,
linear.output = T,
lifesign = 'full')
net <- neuralnet(form, m,
hidden=7,
linear.output = T,
lifesign = 'full')
net <- neuralnet(form, m,
hidden=7,threshold = 0.05
linear.output = T,
lifesign = 'full')
net <- neuralnet(form, m,
hidden=7,threshold = 0.05,
linear.output = T,
lifesign = 'full')
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]]#*(maxs[input$t_f]-mins[input$t_f]) + mean(mydata[,input$t_f])
,1,which.max)#min error rep only
pred
net$net.result[[which.min(net$result.matrix[1,])]]
pred <- sort(unique(mydata[,input$t_f]))[pred]
pred <- sort(unique(mydata[,'Class']))[pred]
pred
apply(net$net.result[[which.min(net$result.matrix[1,])]]#*(maxs[input$t_f]-mins[input$t_f]) + mean(mydata[,input$t_f])
,1,which.max)
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]]#*(maxs[input$t_f]-mins[input$t_f]) + mean(mydata[,input$t_f])
,1,which.max)#min error rep only
pred <- sort(unique(mydata[,input$t_f]))[pred]
pred <- sort(unique(mydata[,'Class']))[pred]
pred
confusionMatrix(table(mydata[,input$t_f],pred))
confusionMatrix(table(mydata[,'Class'],pred))
colnames(m)[1:10]
colnames(m)[1:11]
net$net.result[[which.min(net$result.matrix[1,])]]
net$response
colnames(net$response)
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]]#*(maxs[input$t_f]-mins[input$t_f]) + mean(mydata[,input$t_f])
,1,which.max)#min error rep only
pred <- colnames(net$response)[pred]
pred
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]]#*(maxs[input$t_f]-mins[input$t_f]) + mean(mydata[,input$t_f])
,1,which.max)#min error rep only
pred <- sort(unique(mydata[,input$t_f]))[pred]
pred <- sort(unique(mydata[,'Class']))[pred]
pred
strsplit('Class',colnames(net$response))
?strsplit('Class',colnames(net$response))
?strsplit(colnames(net$response),'Class')
strsplit(colnames(net$response),'Class')
unlist(strsplit(colnames(net$response),'Class'))
strsplit(colnames(net$response),'Class')[[1]]
strsplit(colnames(net$response),'Class',fixed = T)
gsub("Class",'',colnames(net$response))
pred <- apply(net$net.result[[which.min(net$result.matrix[1,])]]#*(maxs[input$t_f]-mins[input$t_f]) + mean(mydata[,input$t_f])
,1,which.max)#min error rep only
pred <- gsub("Class",'',colnames(net$response))[pred]
pred
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
svm_Mod$results
boost_Mod$results
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
head(mydata)
head(Sacramento)
shiny::runApp('rdir/pro')
rm(list=ls())
shiny::runApp('rdir/pro')
m <- mydata[,!names(mydata) %in% input$t_f]
m <- mydata[,!names(mydata) %in% 'medv']
idx <- sapply(m, class)%in%c('numeric','integer')
n <- as.data.frame(lapply(1:deg,function(i){m[,idx]^i}))
n <- as.data.frame(lapply(1:2,function(i){m[,idx]^i}))
n <- cbind(m[!colnames(m)%in%colnames(n)],n)
head(n)
shiny::runApp('rdir/pro')
?RMSE
R2()
R2(1:10,1:10+rnorm(10))
R2(1:10,1:10+rnorm(10))
R2(1:10,2:11+rnorm(10))
R2(1:10,2:11)
R2(1:10,1:10+rnorm(10))
set.seed(1)
R2(1:10,1:10+rnorm(10))
set.seed(1)
R2(1:10,1:10+rnorm(10))
set.seed(1)
cor(1:10,1:10+rnorm(10))
set.seed(1)
cor(1:10,1:10+rnorm(10))^2
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
sapply(mydata, class)=='factor'
sapply(mydata, class) %in% 'factor'
colnames(mydata)sapply(mydata, class) %in% 'factor'
colnames(mydata)[sapply(mydata, class) %in% 'factor']
colnames(mydata)[sapply(mydata, class) == 'factor']
colnames(mydata)[sapply(mydata, class) != 'factor']
colnames(mydata)[!sapply(mydata, class) %in% 'factor']
sapply(mydata, class) %in% 'factor'
sapply(mydata, class) %in% c('factor','character')
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
sum(complete.cases(mydata))
dim(mydata)
sum(complete.cases(diamonds))
dim(diamonds)
rm(list=ls())
shiny::runApp('rdir/pro')
SEED <<- 5678
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
View(mydata)
s <- train(mydata[,!names(mydata) %in% 'UNS'],mydata[,'UNS'],method = 'svm')
s <- train(mydata[,!names(mydata) %in% 'UNS'],mydata[,'UNS'],method = 'svmLinear')
registerDoParallel(makeCluster(3))
s <- train(mydata[,!names(mydata) %in% 'UNS'],mydata[,'UNS'],method = 'svmLinear')
s
shiny::runApp('rdir/pro')
shiny::runApp('rdir/pro')
library(caret)
library(neuralnet)
data("segmentationData")
dat <- segmentationData
set.seed(5678)
t <- 'Class'
idi <- createDataPartition(dat[,t],p=0.8,list=F)
itest <- dat[-idi,3:61]
dat <- dat[idi,3:61]
setwd('rdir/proRepo/class1')
svml <- readRDS('svmLinear.rds')
svmr <- readRDS('svmRadial.rds')
svmp <- readRDS('svmPoly.rds')
lda <- readRDS('lda.rds')
rf <- readRDS('rf.rds')
rp <- readRDS('rpart.rds')
boostgbm <- readRDS('boostgbm.rds')
boostxgb <- readRDS('boostxgb.rds')
boostada <- readRDS('boostada.rds')
reglog <- readRDS('reglog.rds')
knn <- readRDS('knn.rds')
nb <- readRDS('nb.rds')
nnrpropp <- readRDS('nnrprop+.rds')
nnrpropm <- readRDS('nnrprop-.rds')
nnsag <- readRDS('nnsag.rds')
nnslr <- readRDS('nnslr.rds')
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,lda,rf,rp,boostgbm,boostxgb,boostada,reglog,nb,knn)
# for(i in 1:12){
#   obj <- lt[[i]]
#   print(obj$method)
#   print(obj$results[which.min(obj$results$RMSE),])
# }
for(i in 1:12){
obj <- lt[[i]]
#training
pred <- predict(obj,dat[!names(dat) %in% t])#nb warnings
obj_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(obj_tab$overall[1:2],obj_tab$byClass))
#sensitivity of major class only because 4 rows
#test
pred2 <- predict(obj,itest[!names(dat) %in% t])
obj_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(obj_tab2$overall[1:2],obj_tab2$byClass))
tim <- rbind(tim,obj$times$everything[1:3])
}
for(i in 1:12){
val_df <- rbind(val_df, lt[[i]]$results[which.max(lt[[i]]$results$Kappa),c("Accuracy",'Kappa')])
}
colnames(train_df) <- c('Accuracy','Kappa','Sensitivity','Specificity','Pos Pred Value','Neg Pred Value','Prevalence','Detection Rate','Detection Prevalence','Balanced Accuracy')
colnames(val_df) <- c('Accuracy','Kappa')
colnames(test_df) <- c('Accuracy','Kappa','Sensitivity','Specificity','Pos Pred Value','Neg Pred Value','Prevalence','Detection Rate','Detection Prevalence','Balanced Accuracy')
colnames(tim) <- c('user','self', 'elapsed')
ltn <- list(nnrpropp,nnrpropm,nnsag,nnslr)
for(i in 1:4){
obj <- ltn[[i]]
pred <- apply(obj$net.result[[which.min(obj$result.matrix[1,])]],1,which.max)#min error rep only
#pred <- sort(unique(dat[,t]))[pred]
pred <- gsub(t,'',colnames(obj$response))[pred]
net_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(net_tab$overall[1:2],net_tab$byClass))
mxs <- apply(dat[!names(dat) %in% t], 2, max)
mns <- apply(dat[!names(dat) %in% t], 2, min)
dv <- mxs-mns
dv[dv==0] <- 1 #avoid NaN
test_msc <- scale(itest[,!names(itest) %in% t],scale=dv)
res <- compute(obj,test_msc,rep=which.min(obj$result.matrix[1,]))$net.result
pred2 <- apply(res,1,which.max)#min error rep only
#pred2 <- sort(unique(itest[,t]))[pred2]
pred2 <- gsub(t,'',colnames(obj$response))[pred2]
net_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(net_tab2$overall[1:2],net_tab2$byClass))
}
rownames(train_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Adaboost','Logistic','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(val_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Adaboost','Logistic','Naive Bayes','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
rownames(test_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Adaboost','Logistic','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(tim) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Adaboost','Logistic','Naive Bayes','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
tr <- round(train_df[order(train_df$Kappa,decreasing = T),],3)
vl <-round(val_df[order(val_df$Kappa,decreasing = T),],3)
tt <- round(test_df[order(test_df$Kappa,decreasing = T),],3)
#tm <- tim[order(tim$elapsed),]
for(i in 1:12){
obj <- lt[[i]]
print(obj$method)
print(obj$results[which.min(obj$results$RMSE),])
}
i <- 1
obj <- lt[[i]]
obj
print(obj$method)
print(obj$results[which.min(obj$results$RMSE),])
for(i in 1:12){
obj <- lt[[i]]
print(obj$method)
print(obj$results[which.min(obj$results$Kappa),])
}
??adaboost
library(ada)
?ada()
setwd('../class2')
library(mlbench)
data("Ionosphere")
dat <- Ionosphere#read.csv('class3.csv')
dat$V1 <- as.numeric(dat$V1)
dat$V2 <- as.numeric(dat$V2)
set.seed(5678)
t <- 'Class'
idi <- createDataPartition(dat[,t],p=0.8,list=F)
itest <- dat[-idi,]
dat <- dat[idi,]
svml <- readRDS('svmLinear.rds')
svmr <- readRDS('svmRadial.rds')
svmp <- readRDS('svmPoly.rds')
sqda <- readRDS('sqda.rds')
rf <- readRDS('rf.rds')
rp <- readRDS('rpart.rds')
boostgbm <- readRDS('boostgbm.rds')
boostxgb <- readRDS('boostxgb.rds')
boostada <- readRDS('boostada.rds')
reglog <- readRDS('reglog.rds')
knn <- readRDS('knn.rds')
nb <- readRDS('nb.rds')
nnrpropp <- readRDS('nnrprop+.rds')
nnrpropm <- readRDS('nnrprop-.rds')
nnsag <- readRDS('nnsag.rds')
nnslr <- readRDS('nnslr.rds')
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,sqda,rf,rp,boostgbm,boostxgb,boostada,reglog,nb,knn)
for(i in 1:12){
obj <- lt[[i]]
print(obj$method)
print(obj$results[which.min(obj$results$Kappa),])
}
setwd('../class3')
library(gdata)
dat <- read.csv('class3.csv')
set.seed(5678)
idi <- createDataPartition(dat$UNS,p=0.8,list=F)
itest <- dat[-idi,2:7]
dat <- dat[idi,2:7]
svml <- readRDS('svmLinear.rds')
svmr <- readRDS('svmRadial.rds')
svmp <- readRDS('svmPoly.rds')
lda <- readRDS('lda.rds')
rf <- readRDS('rf.rds')
rp <- readRDS('rpart.rds')
boostgbm <- readRDS('boostgbm.rds')
boostxgb <- readRDS('boostxgb.rds')
knn <- readRDS('knn.rds')
nb <- readRDS('nb.rds')
nnrpropp <- readRDS('nnrprop+.rds')
nnrpropm <- readRDS('nnrprop-.rds')
nnsag <- readRDS('nnsag.rds')
nnslr <- readRDS('nnslr.rds')
t <- 'UNS'
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,lda,rf,rp,boostgbm,boostxgb,nb,knn)
for(i in 1:12){
obj <- lt[[i]]
print(obj$method)
print(obj$results[which.min(obj$results$RMSE),])
}
for(i in 1:10){
obj <- lt[[i]]
print(obj$method)
print(obj$results[which.min(obj$results$Kappa),])
}
