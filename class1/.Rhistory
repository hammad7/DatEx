pred <- gsub(t,'',colnames(obj$response))[pred]
net_tab <- confusionMatrix(table(dat[,t],pred))
train_df <- rbind(train_df,c(net_tab$overall[1:2],net_tab$byClass[which.max(table(dat[,t])),]))
mxs <- apply(dat[!names(dat) %in% t], 2, max)
mns <- apply(dat[!names(dat) %in% t], 2, min)
dv <- mxs-mns
dv[dv==0] <- 1 #avoid NaN
test_msc <- scale(itest[,!names(itest) %in% t],scale=dv)
res <- compute(obj,test_msc,rep=which.min(obj$result.matrix[1,]))$net.result
pred2 <- apply(res,1,which.max)#min error rep only
#pred2 <- sort(unique(itest[,t]))[pred2]
pred2 <- gsub(t,'',colnames(obj$response))[pred2]
net_tab2 <- confusionMatrix(table(itest[,t],pred2))
test_df <- rbind(test_df,c(net_tab2$overall[1:2],net_tab2$byClass[which.max(table(dat[,t])),]))
}
rownames(train_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(val_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
rownames(test_df) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(tim) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
tr <- round(train_df[order(train_df$Kappa,decreasing = T),],3)
vl <-round(val_df[order(val_df$Kappa,decreasing = T),],3)
tt <- round(test_df[order(test_df$Kappa,decreasing = T),],3)
#tm <- tim[order(tim$elapsed),]
#tm_withnn <- c(tim[,3],c(31.30,31.34,61.70,50.04))
up <- data.frame(elapsed=c(31.30,31.34,61.70,50.04))
rownames(up) <- c('NNrprop+','NNrprop-','NNsag','NNslr')
tm_withnn <- rbind(tim['elapsed'],up)
tm_withnn <- tm_withnn[order(tm_withnn$elapsed),,drop=F]
#names(tm_withnn) <- c('svmLinear','svmRadial','svmPoly','LDA','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Naive Bayes','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
#tm_withnn <- as.data.frame(sort(tm_withnn))
colnames(tm_withnn) <- 'Time (s);'
View(tm_withnn)
library(mlbench)
library(caret)
library(neuralnet)
data("BostonHousing")
dat <- BostonHousing
dat$chas <- as.numeric(dat$chas)
set.seed(5678)
t <- 'medv'
idi <- createDataPartition(dat[,t],p=0.8,list=F)
itest <- dat[-idi,]
dat <- dat[idi,]
svml <- readRDS('svmLinear.rds')
svmr <- readRDS('svmRadial.rds')
svmp <- readRDS('svmPoly.rds')
rf <- readRDS('rf.rds')
rp <- readRDS('rpart.rds')
boostgbm <- readRDS('boostgbm.rds')
boostxgb <- readRDS('boostxgb.rds')
reglin <- readRDS('reglin.rds')
regquad <- readRDS('regquad.rds')
knn <- readRDS('knn.rds')
nnrpropp <- readRDS('nnrprop+.rds')
nnrpropm <- readRDS('nnrprop-.rds')
nnsag <- readRDS('nnsag.rds')
nnslr <- readRDS('nnslr.rds')
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,rf,rp,boostgbm,boostxgb,reglin,regquad,knn)
# for(i in 1:10){
#   obj <- lt[[i]]
#   print(obj$method)
#   print(obj$results[which.min(obj$results$RMSE),])
# }
for(i in 1:10){
obj <- lt[[i]]
if(i!=9){
pred <- predict(obj,dat[!names(dat) %in% t])
rmse <- RMSE(pred,dat[,t])
rsqua <- R2(pred,dat[,t])
train_df <- rbind(train_df,data.frame(RMSE=rmse,Rsqua=rsqua))
pred2 <- predict(obj,itest[!names(itest) %in% t])
rmse2 <- RMSE(pred2,itest[,t])
rsqua2 <- R2(pred2,itest[,t])
test_df <- rbind(test_df,data.frame(RMSE=rmse2,Rsqua=rsqua2))
}
else{
deg <- 2
m <- dat[,!names(dat) %in% t]
idx <- sapply(m, class)%in%c('numeric','integer')
n <- as.data.frame(lapply(1:deg,function(i){m[,idx]^i}))
n <- cbind(m[!colnames(m)%in%colnames(n)],n)
pred <- predict(obj,n)
rmse <- RMSE(pred,dat[,t])
rsqua <- R2(pred,dat[,t])
train_df <- rbind(train_df,data.frame(RMSE=rmse,Rsqua=rsqua))
m <- itest[,!names(itest) %in% t]
idx <- sapply(m, class)%in%c('numeric','integer')
n <- as.data.frame(lapply(1:deg,function(i){m[,idx]^i}))
n <- cbind(m[!colnames(m)%in%colnames(n)],n)
pred2 <- predict(obj,n)
rmse2 <- RMSE(pred2,itest[,t])
rsqua2 <- R2(pred2,itest[,t])
test_df <- rbind(test_df,data.frame(RMSE=rmse2,Rsqua=rsqua2))
}
tim <- rbind(tim,obj$times$everything[1:3])
}
for(i in 1:10){
val_df <- rbind(val_df, lt[[i]]$results[which.min(lt[[i]]$results$RMSE),c("RMSE",'Rsquared')])
}
colnames(train_df) <- c('RMSE','Rsquared')
colnames(val_df) <- c('RMSE','Rsquared')
colnames(test_df) <- c('RMSE','Rsquared')
colnames(tim) <- c('user','self', 'elapsed')
ltn <- list(nnrpropp,nnrpropm,nnsag,nnslr)
for(i in 1:4){
obj <- ltn[[i]]
mxs <- apply(dat, 2, max)
mns <- apply(dat, 2, min)
div <- mxs-mns
div[div==0] <- 1
msc <- scale(dat,scale=div)
pred <- obj$net.result[[which.min(obj$result.matrix[1,])]]*(mxs[t]-mns[t]) + mean(dat[,t])#min error rep only
rmse <- RMSE(dat[,t],pred)
rsqua <- R2(dat[,t],pred)
train_df <- rbind(train_df,data.frame(RMSE=rmse,Rsquared=rsqua))
#normalise by train data info
test_msc <- scale(itest[,!names(itest) %in% t],
scale=div[!names(itest) %in% t])
res <- compute(obj,test_msc,rep=which.min(obj$result.matrix[1,]))$net.result
res <- res*(mxs[t]-mns[t]) + mean(dat[,t])
rmse2 <- RMSE(itest[,t],res)
rsqua2 <- R2(itest[,t],res)#corr not traditional R2
test_df <- rbind(test_df,data.frame(RMSE=rmse2,Rsquared=rsqua2))
}
rownames(train_df) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(val_df) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
rownames(test_df) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(tim) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
tr <- round(train_df[order(train_df$RMSE,decreasing = F),],3)
vl <-round(val_df[order(val_df$RMSE,decreasing = F),],3)
tt <- round(test_df[order(test_df$RMSE,decreasing = F),],3)
#tm <- tim[order(tim$elapsed),]
setwd('../reg1')
rm(list=ls())
data("BostonHousing")
dat <- BostonHousing
dat$chas <- as.numeric(dat$chas)
set.seed(5678)
t <- 'medv'
idi <- createDataPartition(dat[,t],p=0.8,list=F)
itest <- dat[-idi,]
dat <- dat[idi,]
svml <- readRDS('svmLinear.rds')
svmr <- readRDS('svmRadial.rds')
svmp <- readRDS('svmPoly.rds')
rf <- readRDS('rf.rds')
rp <- readRDS('rpart.rds')
boostgbm <- readRDS('boostgbm.rds')
boostxgb <- readRDS('boostxgb.rds')
reglin <- readRDS('reglin.rds')
regquad <- readRDS('regquad.rds')
knn <- readRDS('knn.rds')
nnrpropp <- readRDS('nnrprop+.rds')
nnrpropm <- readRDS('nnrprop-.rds')
nnsag <- readRDS('nnsag.rds')
nnslr <- readRDS('nnslr.rds')
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,rf,rp,boostgbm,boostxgb,reglin,regquad,knn)
# for(i in 1:10){
#   obj <- lt[[i]]
#   print(obj$method)
#   print(obj$results[which.min(obj$results$RMSE),])
# }
for(i in 1:10){
obj <- lt[[i]]
if(i!=9){
pred <- predict(obj,dat[!names(dat) %in% t])
rmse <- RMSE(pred,dat[,t])
rsqua <- R2(pred,dat[,t])
train_df <- rbind(train_df,data.frame(RMSE=rmse,Rsqua=rsqua))
pred2 <- predict(obj,itest[!names(itest) %in% t])
rmse2 <- RMSE(pred2,itest[,t])
rsqua2 <- R2(pred2,itest[,t])
test_df <- rbind(test_df,data.frame(RMSE=rmse2,Rsqua=rsqua2))
}
else{
deg <- 2
m <- dat[,!names(dat) %in% t]
idx <- sapply(m, class)%in%c('numeric','integer')
n <- as.data.frame(lapply(1:deg,function(i){m[,idx]^i}))
n <- cbind(m[!colnames(m)%in%colnames(n)],n)
pred <- predict(obj,n)
rmse <- RMSE(pred,dat[,t])
rsqua <- R2(pred,dat[,t])
train_df <- rbind(train_df,data.frame(RMSE=rmse,Rsqua=rsqua))
m <- itest[,!names(itest) %in% t]
idx <- sapply(m, class)%in%c('numeric','integer')
n <- as.data.frame(lapply(1:deg,function(i){m[,idx]^i}))
n <- cbind(m[!colnames(m)%in%colnames(n)],n)
pred2 <- predict(obj,n)
rmse2 <- RMSE(pred2,itest[,t])
rsqua2 <- R2(pred2,itest[,t])
test_df <- rbind(test_df,data.frame(RMSE=rmse2,Rsqua=rsqua2))
}
tim <- rbind(tim,obj$times$everything[1:3])
}
for(i in 1:10){
val_df <- rbind(val_df, lt[[i]]$results[which.min(lt[[i]]$results$RMSE),c("RMSE",'Rsquared')])
}
colnames(train_df) <- c('RMSE','Rsquared')
colnames(val_df) <- c('RMSE','Rsquared')
colnames(test_df) <- c('RMSE','Rsquared')
colnames(tim) <- c('user','self', 'elapsed')
ltn <- list(nnrpropp,nnrpropm,nnsag,nnslr)
for(i in 1:4){
obj <- ltn[[i]]
mxs <- apply(dat, 2, max)
mns <- apply(dat, 2, min)
div <- mxs-mns
div[div==0] <- 1
msc <- scale(dat,scale=div)
pred <- obj$net.result[[which.min(obj$result.matrix[1,])]]*(mxs[t]-mns[t]) + mean(dat[,t])#min error rep only
rmse <- RMSE(dat[,t],pred)
rsqua <- R2(dat[,t],pred)
train_df <- rbind(train_df,data.frame(RMSE=rmse,Rsquared=rsqua))
#normalise by train data info
test_msc <- scale(itest[,!names(itest) %in% t],
scale=div[!names(itest) %in% t])
res <- compute(obj,test_msc,rep=which.min(obj$result.matrix[1,]))$net.result
res <- res*(mxs[t]-mns[t]) + mean(dat[,t])
rmse2 <- RMSE(itest[,t],res)
rsqua2 <- R2(itest[,t],res)#corr not traditional R2
test_df <- rbind(test_df,data.frame(RMSE=rmse2,Rsquared=rsqua2))
}
rownames(train_df) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(val_df) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
rownames(test_df) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(tim) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
tr <- round(train_df[order(train_df$RMSE,decreasing = F),],3)
vl <-round(val_df[order(val_df$RMSE,decreasing = F),],3)
tt <- round(test_df[order(test_df$RMSE,decreasing = F),],3)
up <- data.frame(elapsed=c(1.73,0.96,3.33,8.14))
rownames(up) <- c('NNrprop+','NNrprop-','NNsag','NNslr')
tm_withnn <- rbind(tim['elapsed'],up)
tm_withnn <- tm_withnn[order(tm_withnn$elapsed),,drop=F]
#names(tm_withnn) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
#tm_withnn <- as.data.frame(sort(tm_withnn))
colnames(tm_withnn) <- 'Time (s);'
View(tm_withnn)
setwd('../reg2')
library(AppliedPredictiveModeling)
data(concrete)
dat <- concrete
library(caret)
library(neuralnet)
set.seed(5678)
t <- 'CompressiveStrength'
idi <- createDataPartition(dat[,t],p=0.8,list=F)
itest <- dat[-idi,]
dat <- dat[idi,]
svml <- readRDS('svmLinear.rds')
svmr <- readRDS('svmRadial.rds')
svmp <- readRDS('svmPoly.rds')
rf <- readRDS('rf.rds')
rp <- readRDS('rpart.rds')
boostgbm <- readRDS('boostgbm.rds')
boostxgb <- readRDS('boostxgb.rds')
reglin <- readRDS('reglin.rds')
regquad <- readRDS('regquad.rds')
knn <- readRDS('knn.rds')
nnrpropp <- readRDS('nnrprop+.rds')
nnrpropm <- readRDS('nnrprop-.rds')
nnsag <- readRDS('nnsag.rds')
nnslr <- readRDS('nnslr.rds')
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,rf,rp,boostgbm,boostxgb,reglin,regquad,knn)
# for(i in 1:10){
#   obj <- lt[[i]]
#   print(obj$method)
#   print(obj$results[which.min(obj$results$RMSE),])
# }
for(i in 1:10){
obj <- lt[[i]]
if(i!=9){
pred <- predict(obj,dat[!names(dat) %in% t])
rmse <- RMSE(pred,dat[,t])
rsqua <- R2(pred,dat[,t])
train_df <- rbind(train_df,data.frame(RMSE=rmse,Rsqua=rsqua))
pred2 <- predict(obj,itest[!names(itest) %in% t])
rmse2 <- RMSE(pred2,itest[,t])
rsqua2 <- R2(pred2,itest[,t])
test_df <- rbind(test_df,data.frame(RMSE=rmse2,Rsqua=rsqua2))
}
else{
deg <- 2
m <- dat[,!names(dat) %in% t]
idx <- sapply(m, class)%in%c('numeric','integer')
n <- as.data.frame(lapply(1:deg,function(i){m[,idx]^i}))
n <- cbind(m[!colnames(m)%in%colnames(n)],n)
pred <- predict(obj,n)
rmse <- RMSE(pred,dat[,t])
rsqua <- R2(pred,dat[,t])
train_df <- rbind(train_df,data.frame(RMSE=rmse,Rsqua=rsqua))
m <- itest[,!names(itest) %in% t]
idx <- sapply(m, class)%in%c('numeric','integer')
n <- as.data.frame(lapply(1:deg,function(i){m[,idx]^i}))
n <- cbind(m[!colnames(m)%in%colnames(n)],n)
pred2 <- predict(obj,n)
rmse2 <- RMSE(pred2,itest[,t])
rsqua2 <- R2(pred2,itest[,t])
test_df <- rbind(test_df,data.frame(RMSE=rmse2,Rsqua=rsqua2))
}
tim <- rbind(tim,obj$times$everything[1:3])
}
for(i in 1:10){
val_df <- rbind(val_df, lt[[i]]$results[which.min(lt[[i]]$results$RMSE),c("RMSE",'Rsquared')])
}
colnames(train_df) <- c('RMSE','Rsquared')
colnames(val_df) <- c('RMSE','Rsquared')
colnames(test_df) <- c('RMSE','Rsquared')
colnames(tim) <- c('user','self', 'elapsed')
ltn <- list(nnrpropp,nnrpropm,nnsag,nnslr)
for(i in 1:4){
obj <- ltn[[i]]
mxs <- apply(dat, 2, max)
mns <- apply(dat, 2, min)
div <- mxs-mns
div[div==0] <- 1
msc <- scale(dat,scale=div)
pred <- obj$net.result[[which.min(obj$result.matrix[1,])]]*(mxs[t]-mns[t]) + mean(dat[,t])#min error rep only
rmse <- RMSE(dat[,t],pred)
rsqua <- R2(dat[,t],pred)
train_df <- rbind(train_df,data.frame(RMSE=rmse,Rsquared=rsqua))
#normalise by train data info
test_msc <- scale(itest[,!names(itest) %in% t],
scale=div[!names(itest) %in% t])
res <- compute(obj,test_msc,rep=which.min(obj$result.matrix[1,]))$net.result
res <- res*(mxs[t]-mns[t]) + mean(dat[,t])
rmse2 <- RMSE(itest[,t],res)
rsqua2 <- R2(itest[,t],res)#corr not traditional R2
test_df <- rbind(test_df,data.frame(RMSE=rmse2,Rsquared=rsqua2))
}
rownames(train_df) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(val_df) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
rownames(test_df) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(tim) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
tr <- round(train_df[order(train_df$RMSE,decreasing = F),],3)
vl <-round(val_df[order(val_df$RMSE,decreasing = F),],3)
tt <- round(test_df[order(test_df$RMSE,decreasing = F),],3)
up <- data.frame(elapsed=c(5.30,9.33,61.03,18.00))
rownames(up) <- c('NNrprop+','NNrprop-','NNsag','NNslr')
tm_withnn <- rbind(tim['elapsed'],up)
tm_withnn <- tm_withnn[order(tm_withnn$elapsed),,drop=F]
#names(tm_withnn) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
#tm_withnn <- as.data.frame(sort(tm_withnn))
colnames(tm_withnn) <- 'Time (s);'
View(tm_withnn)
setwd('../reg3')
View(tm_withnn)
dat <- read.csv('reg3.csv')
dat <- dat[,2:7]
library(caret)
library(neuralnet)
set.seed(5678)
t <- 'V6'
idi <- createDataPartition(dat[,t],p=0.8,list=F)
itest <- dat[-idi,]
dat <- dat[idi,]
svml <- readRDS('svmLinear.rds')
svmr <- readRDS('svmRadial.rds')
svmp <- readRDS('svmPoly.rds')
rf <- readRDS('rf.rds')
rp <- readRDS('rpart.rds')
boostgbm <- readRDS('boostgbm.rds')
boostxgb <- readRDS('boostxgb.rds')
reglin <- readRDS('reglin.rds')
regquad <- readRDS('regquad.rds')
knn <- readRDS('knn.rds')
nnrpropp <- readRDS('nnrprop+.rds')
nnrpropm <- readRDS('nnrprop-.rds')
nnsag <- readRDS('nnsag.rds')
nnslr <- readRDS('nnslr.rds')
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,rf,rp,boostgbm,boostxgb,reglin,regquad,knn)
# for(i in 1:10){
#   obj <- lt[[i]]
#   print(obj$method)
#   print(obj$results[which.min(obj$results$RMSE),])
# }
for(i in 1:10){
obj <- lt[[i]]
if(i!=9){
pred <- predict(obj,dat[!names(dat) %in% t])
rmse <- RMSE(pred,dat[,t])
rsqua <- R2(pred,dat[,t])
train_df <- rbind(train_df,data.frame(RMSE=rmse,Rsqua=rsqua))
pred2 <- predict(obj,itest[!names(itest) %in% t])
rmse2 <- RMSE(pred2,itest[,t])
rsqua2 <- R2(pred2,itest[,t])
test_df <- rbind(test_df,data.frame(RMSE=rmse2,Rsqua=rsqua2))
}
else{
deg <- 2
m <- dat[,!names(dat) %in% t]
idx <- sapply(m, class)%in%c('numeric','integer')
n <- as.data.frame(lapply(1:deg,function(i){m[,idx]^i}))
n <- cbind(m[!colnames(m)%in%colnames(n)],n)
pred <- predict(obj,n)
rmse <- RMSE(pred,dat[,t])
rsqua <- R2(pred,dat[,t])
train_df <- rbind(train_df,data.frame(RMSE=rmse,Rsqua=rsqua))
m <- itest[,!names(itest) %in% t]
idx <- sapply(m, class)%in%c('numeric','integer')
n <- as.data.frame(lapply(1:deg,function(i){m[,idx]^i}))
n <- cbind(m[!colnames(m)%in%colnames(n)],n)
pred2 <- predict(obj,n)
rmse2 <- RMSE(pred2,itest[,t])
rsqua2 <- R2(pred2,itest[,t])
test_df <- rbind(test_df,data.frame(RMSE=rmse2,Rsqua=rsqua2))
}
tim <- rbind(tim,obj$times$everything[1:3])
}
for(i in 1:10){
val_df <- rbind(val_df, lt[[i]]$results[which.min(lt[[i]]$results$RMSE),c("RMSE",'Rsquared')])
}
colnames(train_df) <- c('RMSE','Rsquared')
colnames(val_df) <- c('RMSE','Rsquared')
colnames(test_df) <- c('RMSE','Rsquared')
colnames(tim) <- c('user','self', 'elapsed')
ltn <- list(nnrpropp,nnrpropm,nnsag,nnslr)
for(i in 1:4){
obj <- ltn[[i]]
mxs <- apply(dat, 2, max)
mns <- apply(dat, 2, min)
div <- mxs-mns
div[div==0] <- 1
msc <- scale(dat,scale=div)
pred <- obj$net.result[[which.min(obj$result.matrix[1,])]]*(mxs[t]-mns[t]) + mean(dat[,t])#min error rep only
rmse <- RMSE(dat[,t],pred)
rsqua <- R2(dat[,t],pred)
train_df <- rbind(train_df,data.frame(RMSE=rmse,Rsquared=rsqua))
#normalise by train data info
test_msc <- scale(itest[,!names(itest) %in% t],
scale=div[!names(itest) %in% t])
res <- compute(obj,test_msc,rep=which.min(obj$result.matrix[1,]))$net.result
res <- res*(mxs[t]-mns[t]) + mean(dat[,t])
rmse2 <- RMSE(itest[,t],res)
rsqua2 <- R2(itest[,t],res)#corr not traditional R2
test_df <- rbind(test_df,data.frame(RMSE=rmse2,Rsquared=rsqua2))
}
rownames(train_df) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(val_df) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
rownames(test_df) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
rownames(tim) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN')#,'NNrprop+','NNrprop-','NNsag','NNslr')
tr <- round(train_df[order(train_df$RMSE,decreasing = F),],3)
vl <-round(val_df[order(val_df$RMSE,decreasing = F),],3)
tt <- round(test_df[order(test_df$RMSE,decreasing = F),],3)
#tm <- tim[order(tim$elapsed),]
up <- data.frame(elapsed=c(62.11,84.90,7.03,20.25))
rownames(up) <- c('NNrprop+','NNrprop-','NNsag','NNslr')
tm_withnn <- rbind(tim['elapsed'],up)
tm_withnn <- tm_withnn[order(tm_withnn$elapsed),,drop=F]
#names(tm_withnn) <- c('svmLinear','svmRadial','svmPoly','Random Forest','Rpart','Gradient Boosting','eXtreme Grad. B.','Linear Reg.','Quadratic Reg.','KNN','NNrprop+','NNrprop-','NNsag','NNslr')
#tm_withnn <- as.data.frame(sort(tm_withnn))
colnames(tm_withnn) <- 'Time (s);'
View(tm_withnn)
library(caret)
data("segmentationData"
)
dat <- segmentationData
set.seed(5678)
t <- 'Class'
idi <- createDataPartition(dat[,t],p=0.8,list=F)
itest <- dat[-idi,3:61]
dat <- dat[idi,3:61]
setwd('../clas11')
setwd('../class1')
svml <- readRDS('svmLinear.rds')
svmr <- readRDS('svmRadial.rds')
svmp <- readRDS('svmPoly.rds')
lda <- readRDS('lda.rds')
rf <- readRDS('rf.rds')
rp <- readRDS('rpart.rds')
boostgbm <- readRDS('boostgbm.rds')
boostxgb <- readRDS('boostxgb.rds')
boostada <- readRDS('boostada.rds')
reglog <- readRDS('reglog.rds')
knn <- readRDS('knn.rds')
nb <- readRDS('nb.rds')
nnrpropp <- readRDS('nnrprop+.rds')
nnrpropm <- readRDS('nnrprop-.rds')
nnsag <- readRDS('nnsag.rds')
nnslr <- readRDS('nnslr.rds')
tim <- data.frame()
train_df <- data.frame()
val_df <- data.frame()
test_df <- data.frame()
lt <-list(svml,svmr,svmp,lda,rf,rp,boostgbm,boostxgb,boostada,reglog,nb,knn)
for(i in 1:10){
obj <- lt[[i]]
print(obj$method)
print(obj$results[which.min(obj$results$RMSE),])
}
lt <-list(svml,svmr,svmp,lda,rf,rp,boostgbm,boostxgb,boostada,reglog,nb,knn)
for(i in 1:10){
obj <- lt[[i]]
print(obj$method)
print(obj$results[which.min(obj$results$RMSE),])
}
